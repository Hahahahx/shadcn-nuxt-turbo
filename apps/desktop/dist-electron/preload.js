"use strict";const t=require("electron");var c=(e=>(e.Create="minio-create",e.CreateByToken="minio-create-by-token",e.Exit="minio-exit",e.BucketExists="bucket-exists",e.BucketsList="buckets-list",e.BucketCreate="bucket-create",e.BucketRemove="bucket-remove",e.ObjectsList="objects-list",e.ObjectsRemove="objects-remove",e.ObjectsUpload="objects-upload",e.ObjectsDownload="objects-download",e))(c||{});const u={send(e,o){t.ipcRenderer.send(e,o)},on(e,o){const r=(d,s)=>o(s);return t.ipcRenderer.on(e,r),()=>{t.ipcRenderer.removeListener(e,r)}},once(e,o){const r=(d,s)=>o(s);return t.ipcRenderer.once(e,r),()=>{t.ipcRenderer.removeListener(e,r)}}};t.contextBridge.exposeInMainWorld("ipc",u);function n(e,o){return new Promise((r,d)=>{console.log("send------",e,o),u.send(e,o),u.once(e,s=>{console.log(e,s),s.result?r(s.data):d(s.msg)})})}const a={create:e=>n(c.Create,e),createByToken:e=>n(c.CreateByToken,e)};t.contextBridge.exposeInMainWorld("minio",a);const b={list:()=>n(c.BucketsList),create:e=>n(c.BucketCreate,e),remove:e=>n(c.BucketRemove,e)};t.contextBridge.exposeInMainWorld("bucket",b);const i={list:e=>n(c.ObjectsList,e),upload:e=>n(c.ObjectsUpload,e)};t.contextBridge.exposeInMainWorld("object",i);
